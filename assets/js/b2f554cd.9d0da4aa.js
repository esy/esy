"use strict";(self.webpackChunksite_v_3=self.webpackChunksite_v_3||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2020/01/12/0.6.0","metadata":{"permalink":"/blog/2020/01/12/0.6.0","source":"@site/blog/2020-01-12-0.6.0.md","title":"New release - 0.6.0 \ud83c\udf89","description":"We went quite again for a while with the blog - between the last post, we released 0.5.* and now 0.6.0.","date":"2020-01-12T00:00:00.000Z","formattedDate":"January 12, 2020","tags":[],"readingTime":1.73,"hasTruncateMarker":true,"authors":[{"name":"Manas Jayanth","url":"https://twitter.com/ManasJayanth"}],"frontMatter":{"author":"Manas Jayanth","authorURL":"https://twitter.com/ManasJayanth","title":"New release - 0.6.0 \ud83c\udf89"},"unlisted":false,"nextItem":{"title":"What\'s new in esy 0.4.x","permalink":"/blog/2018/12/27/0.4.x"}},"content":"We went quite again for a while with the blog - between the last post, we released 0.5.* and now 0.6.0.\\n\\nThis time received contributions from 28 contributors! Thank you\\neveryone! Let\'s take a quick look at what new in 0.6.0.\\n\\n\x3c!--truncate--\x3e\\n\\n### esy cleanup\\n\\nWe added a sub-command `cleanup` to reclaim disk space by purging\\nunused builds. Over time, cached builds would just accumulate in\\n`~/.esy` and the only way to reclaim space was to delete it\\nentirely. Users had no way of knowing which cached builds were in use\\nby projects and would end up seeing long build times again after deleting the the cached directory.\\n\\n`esy cleanup` takes in a list of projects in use as arguments and\\nremoves all cached builds not needed by any of them:\\n\\n    $ esy cleanup ./project/in/use ./another/project\\n\\nSee [docs][esy-cleanup-reference] for more information.\\n\\n### Improved solver performance with better CUDF encoding\\n\\nWe re-worked how we encode dependencies which improved solver\\nperformance, fixed [critical bug](https://github.com/esy/esy/issues/883). More on this can found at issue [#888](https://github.com/esy/esy/issues/888)\\n\\n### Recursive fetching of submodules, when building packages from source\\n\\nAs a move towards ensuring better compatibility with opam, we\\nrecursively fetch submodules when fetching from git sources.\\n\\nNow esy can install and build packages from git/github even if they depend on\\nsubmodules.\\n\\n### Long paths on Windows\\n\\nWe were earlier constrained to only use 33 characters in the\\nartifact paths in our binaries on Windows - this caused\\nrelocatability issues and delayed our plans of fetching prebuilts\\nfor esy sandbox. With this release, esy now enables long paths on\\nsupported Windows machines and brings back relocatability (and\\nthere shorted build times with prebuilts) back on the table.\\n\\n### Other Notable fixes\\n\\nBesides that 0.6.0 contains fixes for not a small number of bugs, many doc\\nupdates and small quality-of-life improvements. Some things worth mentioning:\\n\\n  - More robust project discovery\\n  - Improved git source parsing\\n  - Test suite improvements\\n  - New command esy run-script SCRIPTNAME which provides a future proof way of\\n    running package.json scripts\\n\\nThe entire changelog can be found [here][CHANGELOG].\\n\\n[esy-cleanup-reference]: https://esy.sh/docs/en/commands.html#esy-cleanup\\n[CHANGELOG]: https://github.com/esy/esy/blob/master/CHANGELOG.md#060--latest"},{"id":"/2018/12/27/0.4.x","metadata":{"permalink":"/blog/2018/12/27/0.4.x","source":"@site/blog/2018-12-27-0.4.x.md","title":"What\'s new in esy 0.4.x","description":"This is the first public blog post on the esy dev blog.  We\'ve been writing","date":"2018-12-27T00:00:00.000Z","formattedDate":"December 27, 2018","tags":[],"readingTime":6.395,"hasTruncateMarker":true,"authors":[{"name":"Andrey Popp","url":"https://twitter.com/andreypopp"}],"frontMatter":{"author":"Andrey Popp","authorURL":"https://twitter.com/andreypopp","title":"What\'s new in esy 0.4.x"},"unlisted":false,"prevItem":{"title":"New release - 0.6.0 \ud83c\udf89","permalink":"/blog/2020/01/12/0.6.0"}},"content":"This is the first public blog post on the esy dev blog.  We\'ve been writing\\nlots and lots of code to make esy work well, and until now we haven\'t\\ncommunicated much about esy.\\n\\n\x3c!--truncate--\x3e\\n\\n## What Is Esy\\n\\nIf you\'ve stumbled upon this and don\'t know what esy is: esy is a\\n\\"package.json\\"-like workflow with first class support for native development.\\n\\nEsy started as part of the [reason][reason] effort with the goal of\\nimplementing isolated and fast native Reason/OCaml project builds that were\\nfamiliar to JavaScript developers. Esy itself is compiled natively,\\nand can manage packages for most compiled languages (we use it to\\npackage/distribute C/C++ packages in addition to Reason and OCaml).\\n\\nEsy should be familiar to anyone with experience with Yarn, or npm (just run\\n`esy` inside a directory with a `package.json`).\\n\\n- esy provides a unified package management workflow that can install/build\\n  packages from [opam][opam] as well as native packages published to [npm][npm]\\n\\n- esy is not tied to any particular choice of a language/platform. Though we are\\n  focusing on native Reason/OCaml first.\\n\\n- esy is build-system agnostic: you don\'t have to port a project\\n  to some specific build system to make it work with esy.\\n\\n- esy tries to provide \\"hermetic\\" builds so that builds of packages are\\n  unaffected by the system software installed at global paths: if it works on my\\n  machine then it should work on yours.\\n\\n- esy caches built packages across projects: with a warm cache, new projects\\n  are cheap to initialise and build.\\n\\nThis is not an exhaustive list of esy features but we think these are the most\\nimportant points.\\nRead more about esy\'s motivations in the [esy docs][esydocs] \\n\\n## esy 0.4.x\\n\\nWe recently promoted the 0.4.9 release of esy as `latest`. That means if you\\nexecute:\\n\\n```shell\\n% npm install -g esy\\n```\\n\\nYou\'ll get `esy@0.4.9` which is packed with new features. Below we discuss some\\nof those.\\n\\n### Plug\'n\'play Installations\\n\\n**TL;DR:** esy won\'t populate `node_modules` directory with package sources\\nanymore, and esy now supports installing Plug\'n\'play(pnp) JavaScript\\ndependencies.\\n\\nIn its first iteration, `esy` initially installed all dependency sources into\\n`node_modules.` The benefit of this is that approach is that it was compatible\\nwith popular JS tooling that relied on `node_modules` directory. The downside\\nwas that for native packages (the main focus of esy) copying sources over from\\ncache to a `node_modules` directory was unnecessary and a waste of time and\\ndisk space.\\n\\nFurthermore, esy already builds projects purely out-of-source to ensure\\nreproducibility - installing into `node_modules` was merely done to adhere to\\nJavaScript\'s conventions, and it actually risked compromising reproducibility.\\n\\nSo how could esy achieve the best of both worlds (JS runtime compatibility) and\\n(maintaining reproducible package builds)?\\n\\nFortunately, Yarn team figured out how to ditch `node_modules` for JS packages.\\nThey designed a new convention called [Plug\'n\'play installations][pnp] (\\"pnp\\").\\nPnp is a way to run JS packages directly from the global package cache without\\ncopying them to `node_modules`, while having Node, Webpack and other runtimes\\nto be able to resolve code from there.\\n\\nAs of 0.4.x, esy now places a copy of Yarn\'s `pnp.js` runtime at installation\\ntime into your project when installing JavaScript dependencies. That `pnp.js`\\nallows `node`\'s module resolution to work even if dependencies are not in\\n`node_modules`. That makes `esy` JavaScript dependencies more like native\\ndependencies &mdash; they don\'t have to be copied into `node_modules`.  Now,\\neven if your project has JavaScript dependencies, installations with a warm\\ncache are fast. Like, really fast (timings are for\\n[esy-ocaml/hello-reason][hello-reason] project):\\n\\n```shell\\n% time esy install\\ninfo install 0.4.7\\ninfo fetching: done\\ninfo installing: done\\nesy install  0.08s user 0.06s system 93% cpu 0.142 total\\n```\\n\\nThis also means that esy is now compatible with the most important parts of the\\nJS ecosystem: webpack, jest, flow, react-scripts, rollup, prettier and others\\nwhich have all been made pnp compatible thanks to the efforts of Yarn. A few\\nnpm packages have still not made themselves pnp compatible &mdash; you should\\nfile issues on those projects requesting that they support pnp, so that they\\ncan be used with Yarn pnp, esy, and any other package manager that adopts\\nthe pnp standard.\\n\\nThe workflow for working with JS (non-native) packages with esy looks like this:\\n\\n- After installing dependencies as usual, execute pnp-enabled NodeJs\\n  interpreter:\\n\\n  ```shell\\n  % esy node\\n  ```\\n- Execute npm binaries installed with packages like webpack, flow, jest and\\n  similar:\\n\\n  ```shell\\n  % esy webpack\\n  % esy flow\\n  % esy jest\\n  ```\\n\\n### Alpha preview of Windows support\\n\\nAnother huge feature which shipped in 0.4.x is preliminary native Windows\\nsupport! Install and use `esy` directly from native Windows command prompt\\nwithout needing to install anything else on your system.\\nYes &mdash; it produces pure native Windows binaries that run on any Windows\\nmachine.\\n\\nThanks to heroic effots of [Bryan Phelps][bryphe] and foundational work by the\\nOCaml community developing Reason/OCaml, native project management on Windows\\nare now as easy as on macOS/Linux:\\n\\n```shell\\nC:\\\\Users\\\\Andrey> git clone https://github.com/facebook/reason\\nC:\\\\Users\\\\Andrey> cd reason\\nC:\\\\Users\\\\Andrey> esy\\ninfo install 0.4.9\\ninfo fetching: done\\ninfo installing: done\\n```\\n\\nThere is more to say about how Windows support is implemented in esy and we\\nwill make sure there\'s a dedicated post on this in the near future where we\\nwill describe some of the foundational compiler and tooling work for Windows\\nthat the OCaml community has invested in.\\n\\nNote though that Windows support is still considered alpha &mdash; there are\\nrough edges which needs to be fixed. If you are a developer who works on Windows\\nand want to help &mdash; jump into [esy/esy issues labelled\\n\\"Windows\\"][win-issues] and help us! The good thing is that we have CI running on\\nWindows too (a big thank you to [Ulrik Strid][ulrikstrid] for making sure a large\\npart of our test suite can run on Windows).\\n\\n### Other 0.4.x goodies\\n\\nThere are lots and lots of changes in the 0.4.x release line, which could have\\narguably been versioned `0.5.x`. In the future, we are aiming for more\\nincremental releases.\\n\\nThere are too many new features to list, but to highlight a couple of entries\\nin the [CHANGELOG][]:\\n\\n- Improved workflow for linked packages: working on multiple packages in\\n  development is now more efficient and esy allows more flexibility in how you\\n  organize your project.\\n\\n- Support for multiple isolated environments constructed on the fly from\\n  package configs. Now you may have multiple `.json` configurations in your\\n  project root (similar to a monorepo) and install/build them in total\\n  isolation. If you have a `package.dev.json` file you can use it explicitly:\\n\\n  ```shell\\n  % esy @package.dev.json build\\n  ```\\n\\n- Flexible package override mechanism which allows turning any source code\\n  distribution into an esy package, bringing it into your project with all the\\n  benefits of the esy workflow: cached builds, isolated environments, etc.\\n  This lets you turn any git hash or URL into an esy package without forking\\n  it, even if that package doesn\'t have a `package.json` file.\\n\\n  ```json\\n  {\\n    \\"resolutions\\": {\\n      \\"pkg-config\\": {\\n        \\"source\\": \\"https://...\\",\\n        \\"override\\": {\\n          \\"build\\": [\\n            \\"./configure --prefix #{self.install}\\",\\n            \\"make\\"\\n          ],\\n          \\"install\\": [\\n            \\"make install\\"\\n          ]\\n        }\\n      }\\n    }\\n  ```\\n\\n- Numerous improvements to esy\'s user interface: new commands (`esy show` and\\n  `esy status`), faster `esy x ...` command invocations, a new set of low level\\n  plumbing commands for \\"scriptable\\" esy workflows, ...\\n\\n- New `esy.lock` format which is easier to review on updates.\\n\\n- Bug fixes, bug fixes, bug fixes, ...\\n\\nSome of these features are not documented yet properly but we\'ll make sure we do\\nthis and then post updates on this blog.\\n\\nStay tuned!\\n\\n[esydocs]: https://esy.sh/docs/en/what-why.html\\n[reason]: https://reasonml.github.io\\n[hello-reason]: https://github.com/esy-ocaml/hello-reason\\n[opam]: https://opam.ocaml.org/\\n[npm]: https://npmjs.com/\\n[pnp]: https://github.com/arcanis/rfcs/blob/6fc13d52f43eff45b7b46b707f3115cc63d0ea5f/accepted/0000-plug-an-play.md\\n[yarn]: http://yarnpkg.com/\\n[bryphe]: https://github.com/bryphe\\n[ulrikstrid]: https://github.com/ulrikstrid\\n[win-issues]: https://github.com/esy/esy/issues?q=is%3Aissue+is%3Aopen+label%3Awindows\\n[CHANGELOG]: https://github.com/esy/esy/blob/496923fce0412f1e3e81ebfa8797a4e09f28ecd4/CHANGELOG.md#048--latest"}]}')}}]);