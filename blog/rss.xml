<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>esy Blog</title>
        <link>https://esy.sh/blog</link>
        <description>esy Blog</description>
        <lastBuildDate>Sun, 12 Jan 2020 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[New release - 0.6.0 ðŸŽ‰]]></title>
            <link>https://esy.sh/blog/2020/01/12/0.6.0</link>
            <guid>https://esy.sh/blog/2020/01/12/0.6.0</guid>
            <pubDate>Sun, 12 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[We went quite again for a while with the blog - between the last post, we released 0.5.* and now 0.6.0.]]></description>
            <content:encoded><![CDATA[<p>We went quite again for a while with the blog - between the last post, we released 0.5.* and now 0.6.0.</p>
<p>This time received contributions from 28 contributors! Thank you
everyone! Let's take a quick look at what new in 0.6.0.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="esy-cleanup">esy cleanup<a href="https://esy.sh/blog/2020/01/12/0.6.0#esy-cleanup" class="hash-link" aria-label="Direct link to esy cleanup" title="Direct link to esy cleanup">â€‹</a></h3>
<p>We added a sub-command <code>cleanup</code> to reclaim disk space by purging
unused builds. Over time, cached builds would just accumulate in
<code>~/.esy</code> and the only way to reclaim space was to delete it
entirely. Users had no way of knowing which cached builds were in use
by projects and would end up seeing long build times again after deleting the the cached directory.</p>
<p><code>esy cleanup</code> takes in a list of projects in use as arguments and
removes all cached builds not needed by any of them:</p>
<p>$ esy cleanup ./project/in/use ./another/project</p>
<p>See <a href="https://esy.sh/docs/en/commands.html#esy-cleanup" target="_blank" rel="noopener noreferrer">docs</a> for more information.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-solver-performance-with-better-cudf-encoding">Improved solver performance with better CUDF encoding<a href="https://esy.sh/blog/2020/01/12/0.6.0#improved-solver-performance-with-better-cudf-encoding" class="hash-link" aria-label="Direct link to Improved solver performance with better CUDF encoding" title="Direct link to Improved solver performance with better CUDF encoding">â€‹</a></h3>
<p>We re-worked how we encode dependencies which improved solver
performance, fixed <a href="https://github.com/esy/esy/issues/883" target="_blank" rel="noopener noreferrer">critical bug</a>. More on this can found at issue <a href="https://github.com/esy/esy/issues/888" target="_blank" rel="noopener noreferrer">#888</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recursive-fetching-of-submodules-when-building-packages-from-source">Recursive fetching of submodules, when building packages from source<a href="https://esy.sh/blog/2020/01/12/0.6.0#recursive-fetching-of-submodules-when-building-packages-from-source" class="hash-link" aria-label="Direct link to Recursive fetching of submodules, when building packages from source" title="Direct link to Recursive fetching of submodules, when building packages from source">â€‹</a></h3>
<p>As a move towards ensuring better compatibility with opam, we
recursively fetch submodules when fetching from git sources.</p>
<p>Now esy can install and build packages from git/github even if they depend on
submodules.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="long-paths-on-windows">Long paths on Windows<a href="https://esy.sh/blog/2020/01/12/0.6.0#long-paths-on-windows" class="hash-link" aria-label="Direct link to Long paths on Windows" title="Direct link to Long paths on Windows">â€‹</a></h3>
<p>We were earlier constrained to only use 33 characters in the
artifact paths in our binaries on Windows - this caused
relocatability issues and delayed our plans of fetching prebuilts
for esy sandbox. With this release, esy now enables long paths on
supported Windows machines and brings back relocatability (and
there shorted build times with prebuilts) back on the table.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-notable-fixes">Other Notable fixes<a href="https://esy.sh/blog/2020/01/12/0.6.0#other-notable-fixes" class="hash-link" aria-label="Direct link to Other Notable fixes" title="Direct link to Other Notable fixes">â€‹</a></h3>
<p>Besides that 0.6.0 contains fixes for not a small number of bugs, many doc
updates and small quality-of-life improvements. Some things worth mentioning:</p>
<ul>
<li>More robust project discovery</li>
<li>Improved git source parsing</li>
<li>Test suite improvements</li>
<li>New command esy run-script SCRIPTNAME which provides a future proof way of
running package.json scripts</li>
</ul>
<p>The entire changelog can be found <a href="https://github.com/esy/esy/blob/master/CHANGELOG.md#060--latest" target="_blank" rel="noopener noreferrer">here</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What's new in esy 0.4.x]]></title>
            <link>https://esy.sh/blog/2018/12/27/0.4.x</link>
            <guid>https://esy.sh/blog/2018/12/27/0.4.x</guid>
            <pubDate>Thu, 27 Dec 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the first public blog post on the esy dev blog.  We've been writing]]></description>
            <content:encoded><![CDATA[<p>This is the first public blog post on the esy dev blog.  We've been writing
lots and lots of code to make esy work well, and until now we haven't
communicated much about esy.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-esy">What Is Esy<a href="https://esy.sh/blog/2018/12/27/0.4.x#what-is-esy" class="hash-link" aria-label="Direct link to What Is Esy" title="Direct link to What Is Esy">â€‹</a></h2>
<p>If you've stumbled upon this and don't know what esy is: esy is a
"package.json"-like workflow with first class support for native development.</p>
<p>Esy started as part of the <a href="https://reasonml.github.io/" target="_blank" rel="noopener noreferrer">reason</a> effort with the goal of
implementing isolated and fast native Reason/OCaml project builds that were
familiar to JavaScript developers. Esy itself is compiled natively,
and can manage packages for most compiled languages (we use it to
package/distribute C/C++ packages in addition to Reason and OCaml).</p>
<p>Esy should be familiar to anyone with experience with Yarn, or npm (just run
<code>esy</code> inside a directory with a <code>package.json</code>).</p>
<ul>
<li>
<p>esy provides a unified package management workflow that can install/build
packages from <a href="https://opam.ocaml.org/" target="_blank" rel="noopener noreferrer">opam</a> as well as native packages published to <a href="https://npmjs.com/" target="_blank" rel="noopener noreferrer">npm</a></p>
</li>
<li>
<p>esy is not tied to any particular choice of a language/platform. Though we are
focusing on native Reason/OCaml first.</p>
</li>
<li>
<p>esy is build-system agnostic: you don't have to port a project
to some specific build system to make it work with esy.</p>
</li>
<li>
<p>esy tries to provide "hermetic" builds so that builds of packages are
unaffected by the system software installed at global paths: if it works on my
machine then it should work on yours.</p>
</li>
<li>
<p>esy caches built packages across projects: with a warm cache, new projects
are cheap to initialise and build.</p>
</li>
</ul>
<p>This is not an exhaustive list of esy features but we think these are the most
important points.
Read more about esy's motivations in the <a href="https://esy.sh/docs/en/what-why.html" target="_blank" rel="noopener noreferrer">esy docs</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="esy-04x">esy 0.4.x<a href="https://esy.sh/blog/2018/12/27/0.4.x#esy-04x" class="hash-link" aria-label="Direct link to esy 0.4.x" title="Direct link to esy 0.4.x">â€‹</a></h2>
<p>We recently promoted the 0.4.9 release of esy as <code>latest</code>. That means if you
execute:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% npm install -g esy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You'll get <code>esy@0.4.9</code> which is packed with new features. Below we discuss some
of those.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="plugnplay-installations">Plug'n'play Installations<a href="https://esy.sh/blog/2018/12/27/0.4.x#plugnplay-installations" class="hash-link" aria-label="Direct link to Plug'n'play Installations" title="Direct link to Plug'n'play Installations">â€‹</a></h3>
<p><strong>TL;DR:</strong> esy won't populate <code>node_modules</code> directory with package sources
anymore, and esy now supports installing Plug'n'play(pnp) JavaScript
dependencies.</p>
<p>In its first iteration, <code>esy</code> initially installed all dependency sources into
<code>node_modules.</code> The benefit of this is that approach is that it was compatible
with popular JS tooling that relied on <code>node_modules</code> directory. The downside
was that for native packages (the main focus of esy) copying sources over from
cache to a <code>node_modules</code> directory was unnecessary and a waste of time and
disk space.</p>
<p>Furthermore, esy already builds projects purely out-of-source to ensure
reproducibility - installing into <code>node_modules</code> was merely done to adhere to
JavaScript's conventions, and it actually risked compromising reproducibility.</p>
<p>So how could esy achieve the best of both worlds (JS runtime compatibility) and
(maintaining reproducible package builds)?</p>
<p>Fortunately, Yarn team figured out how to ditch <code>node_modules</code> for JS packages.
They designed a new convention called <a href="https://github.com/arcanis/rfcs/blob/6fc13d52f43eff45b7b46b707f3115cc63d0ea5f/accepted/0000-plug-an-play.md" target="_blank" rel="noopener noreferrer">Plug'n'play installations</a> ("pnp").
Pnp is a way to run JS packages directly from the global package cache without
copying them to <code>node_modules</code>, while having Node, Webpack and other runtimes
to be able to resolve code from there.</p>
<p>As of 0.4.x, esy now places a copy of Yarn's <code>pnp.js</code> runtime at installation
time into your project when installing JavaScript dependencies. That <code>pnp.js</code>
allows <code>node</code>'s module resolution to work even if dependencies are not in
<code>node_modules</code>. That makes <code>esy</code> JavaScript dependencies more like native
dependencies â€” they don't have to be copied into <code>node_modules</code>.  Now,
even if your project has JavaScript dependencies, installations with a warm
cache are fast. Like, really fast (timings are for
<a href="https://github.com/esy-ocaml/hello-reason" target="_blank" rel="noopener noreferrer">esy-ocaml/hello-reason</a> project):</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% time esy install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info install 0.4.7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info fetching: done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info installing: done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">esy install  0.08s user 0.06s system 93% cpu 0.142 total</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This also means that esy is now compatible with the most important parts of the
JS ecosystem: webpack, jest, flow, react-scripts, rollup, prettier and others
which have all been made pnp compatible thanks to the efforts of Yarn. A few
npm packages have still not made themselves pnp compatible â€” you should
file issues on those projects requesting that they support pnp, so that they
can be used with Yarn pnp, esy, and any other package manager that adopts
the pnp standard.</p>
<p>The workflow for working with JS (non-native) packages with esy looks like this:</p>
<ul>
<li>
<p>After installing dependencies as usual, execute pnp-enabled NodeJs
interpreter:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% esy node</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Execute npm binaries installed with packages like webpack, flow, jest and
similar:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% esy webpack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% esy flow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% esy jest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="alpha-preview-of-windows-support">Alpha preview of Windows support<a href="https://esy.sh/blog/2018/12/27/0.4.x#alpha-preview-of-windows-support" class="hash-link" aria-label="Direct link to Alpha preview of Windows support" title="Direct link to Alpha preview of Windows support">â€‹</a></h3>
<p>Another huge feature which shipped in 0.4.x is preliminary native Windows
support! Install and use <code>esy</code> directly from native Windows command prompt
without needing to install anything else on your system.
Yes â€” it produces pure native Windows binaries that run on any Windows
machine.</p>
<p>Thanks to heroic effots of <a href="https://github.com/bryphe" target="_blank" rel="noopener noreferrer">Bryan Phelps</a> and foundational work by the
OCaml community developing Reason/OCaml, native project management on Windows
are now as easy as on macOS/Linux:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">C:\Users\Andrey&gt; git clone https://github.com/facebook/reason</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">C:\Users\Andrey&gt; cd reason</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">C:\Users\Andrey&gt; esy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info install 0.4.9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info fetching: done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">info installing: done</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is more to say about how Windows support is implemented in esy and we
will make sure there's a dedicated post on this in the near future where we
will describe some of the foundational compiler and tooling work for Windows
that the OCaml community has invested in.</p>
<p>Note though that Windows support is still considered alpha â€” there are
rough edges which needs to be fixed. If you are a developer who works on Windows
and want to help â€” jump into <a href="https://github.com/esy/esy/issues?q=is%3Aissue+is%3Aopen+label%3Awindows" target="_blank" rel="noopener noreferrer">esy/esy issues labelled
"Windows"</a> and help us! The good thing is that we have CI running on
Windows too (a big thank you to <a href="https://github.com/ulrikstrid" target="_blank" rel="noopener noreferrer">Ulrik Strid</a> for making sure a large
part of our test suite can run on Windows).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-04x-goodies">Other 0.4.x goodies<a href="https://esy.sh/blog/2018/12/27/0.4.x#other-04x-goodies" class="hash-link" aria-label="Direct link to Other 0.4.x goodies" title="Direct link to Other 0.4.x goodies">â€‹</a></h3>
<p>There are lots and lots of changes in the 0.4.x release line, which could have
arguably been versioned <code>0.5.x</code>. In the future, we are aiming for more
incremental releases.</p>
<p>There are too many new features to list, but to highlight a couple of entries
in the <a href="https://github.com/esy/esy/blob/496923fce0412f1e3e81ebfa8797a4e09f28ecd4/CHANGELOG.md#048--latest" target="_blank" rel="noopener noreferrer">CHANGELOG</a>:</p>
<ul>
<li>
<p>Improved workflow for linked packages: working on multiple packages in
development is now more efficient and esy allows more flexibility in how you
organize your project.</p>
</li>
<li>
<p>Support for multiple isolated environments constructed on the fly from
package configs. Now you may have multiple <code>.json</code> configurations in your
project root (similar to a monorepo) and install/build them in total
isolation. If you have a <code>package.dev.json</code> file you can use it explicitly:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% esy @package.dev.json build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Flexible package override mechanism which allows turning any source code
distribution into an esy package, bringing it into your project with all the
benefits of the esy workflow: cached builds, isolated environments, etc.
This lets you turn any git hash or URL into an esy package without forking
it, even if that package doesn't have a <code>package.json</code> file.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "resolutions": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "pkg-config": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "source": "https://...",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "override": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "build": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "./configure --prefix #{self.install}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "make"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "install": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          "make install"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Numerous improvements to esy's user interface: new commands (<code>esy show</code> and
<code>esy status</code>), faster <code>esy x ...</code> command invocations, a new set of low level
plumbing commands for "scriptable" esy workflows, ...</p>
</li>
<li>
<p>New <code>esy.lock</code> format which is easier to review on updates.</p>
</li>
<li>
<p>Bug fixes, bug fixes, bug fixes, ...</p>
</li>
</ul>
<p>Some of these features are not documented yet properly but we'll make sure we do
this and then post updates on this blog.</p>
<p>Stay tuned!</p>]]></content:encoded>
        </item>
    </channel>
</rss>