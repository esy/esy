From ea077c8ace1fc9f59afd915327f3b1d0de36fb8c Mon Sep 17 00:00:00 2001
From: Manas Jayanth <3097018+ManasJayanth@users.noreply.github.com>
Date: Fri, 28 Jan 2022 01:44:03 +0530
Subject: [PATCH] Patch missing win32 implementation for gettimeofday

---
 src/time_now_stubs.c | 32 +++++++++++++++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/src/time_now_stubs.c b/src/time_now_stubs.c
index e08d72c..dce49f9 100644
--- a/src/time_now_stubs.c
+++ b/src/time_now_stubs.c
@@ -5,7 +5,7 @@
 
 #define NANOS_PER_SECOND 1000000000
 
-#if defined(JSC_POSIX_TIMERS)
+#if defined(JSC_TIMESPEC)
 
 /* Note: this is imported noalloc if (and only if) ARCH_SIXTYFOUR is defined.
  * This is OK because caml_alloc_int63 doesn't actually allocate in that case. */
@@ -21,9 +21,39 @@ CAMLprim value time_now_nanoseconds_since_unix_epoch_or_zero()
 
 #else
 
+#if (defined(WIN32) || defined(_WIN32))
+// Credit: https://stackoverflow.com/questions/10905892/equivalent-of-gettimeday-for-windows
+#include <Windows.h>
+#include <stdint.h> // portable: uint64_t   MSVC: __int64 
+
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+  // Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's
+  // This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)
+  // until 00:00:00 January 1, 1970 
+  static const uint64_t EPOCH = ((uint64_t) 116444736000000000ULL);
+
+  SYSTEMTIME  system_time;
+  FILETIME    file_time;
+  uint64_t    time;
+
+  GetSystemTime( &system_time );
+  SystemTimeToFileTime( &system_time, &file_time );
+  time =  ((uint64_t)file_time.dwLowDateTime )      ;
+  time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+  tp->tv_sec  = (long) ((time - EPOCH) / 10000000L);
+  tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+  return 0;
+}
+
+#else
+
 #include <sys/types.h>
 #include <sys/time.h>
 
+#endif
+
 CAMLprim value time_now_nanoseconds_since_unix_epoch_or_zero()
 {
   struct timeval tp;
-- 
2.34.1.windows.1

